var _flarebyte$ntriples_filter$Ntriples_Filter$createTriple = F3(
	function (s, p, o) {
		return {subject: s, predicate: p, object: o};
	});
var _flarebyte$ntriples_filter$Ntriples_Filter$fieldCompare = F2(
	function (comparator, value) {
		var _p0 = comparator;
		switch (_p0.ctor) {
			case 'Ignore':
				return true;
			case 'IsEmpty':
				return _elm_lang$core$String$isEmpty(value);
			case 'Equals':
				return _elm_lang$core$Native_Utils.eq(value, _p0._0);
			case 'StartsWith':
				return A2(_elm_lang$core$String$startsWith, _p0._0, value);
			case 'EndsWith':
				return A2(_elm_lang$core$String$endsWith, _p0._0, value);
			case 'Contains':
				return A2(_elm_lang$core$String$contains, _p0._0, value);
			case 'Regx':
				return A2(_elm_lang$core$Regex$contains, _p0._0, value);
			case 'IsTrue':
				return _elm_lang$core$Native_Utils.eq(value, 'true');
			case 'IsFalse':
				return _elm_lang$core$Native_Utils.eq(value, 'true');
			case 'EqualsAny':
				return A2(
					_elm_lang$core$List$any,
					function (n) {
						return _elm_lang$core$Native_Utils.eq(n, value);
					},
					_p0._0);
			case 'GreaterThan':
				return A2(
					_elm_lang$core$Result$withDefault,
					false,
					A2(
						_elm_lang$core$Result$map,
						function (n) {
							return _elm_lang$core$Native_Utils.cmp(n, _p0._0) > 0;
						},
						_elm_lang$core$String$toFloat(value)));
			case 'GreaterThanOrEqual':
				return A2(
					_elm_lang$core$Result$withDefault,
					false,
					A2(
						_elm_lang$core$Result$map,
						function (n) {
							return _elm_lang$core$Native_Utils.cmp(n, _p0._0) > -1;
						},
						_elm_lang$core$String$toFloat(value)));
			case 'LessThan':
				return A2(
					_elm_lang$core$Result$withDefault,
					false,
					A2(
						_elm_lang$core$Result$map,
						function (n) {
							return _elm_lang$core$Native_Utils.cmp(n, _p0._0) < 0;
						},
						_elm_lang$core$String$toFloat(value)));
			case 'LessThanOrEqual':
				return A2(
					_elm_lang$core$Result$withDefault,
					false,
					A2(
						_elm_lang$core$Result$map,
						function (n) {
							return _elm_lang$core$Native_Utils.cmp(n, _p0._0) < 1;
						},
						_elm_lang$core$String$toFloat(value)));
			default:
				return A2(_p0._0, _p0._1, value);
		}
	});
var _flarebyte$ntriples_filter$Ntriples_Filter$tripleCompare = F2(
	function (expr, triple) {
		var _p1 = expr;
		switch (_p1.ctor) {
			case 'Boolean':
				return _p1._0;
			case 'Not':
				return !A2(_flarebyte$ntriples_filter$Ntriples_Filter$tripleCompare, _p1._0, triple);
			case 'And':
				return A2(_flarebyte$ntriples_filter$Ntriples_Filter$tripleCompare, _p1._0, triple) && A2(_flarebyte$ntriples_filter$Ntriples_Filter$tripleCompare, _p1._1, triple);
			case 'Or':
				return A2(_flarebyte$ntriples_filter$Ntriples_Filter$tripleCompare, _p1._0, triple) || A2(_flarebyte$ntriples_filter$Ntriples_Filter$tripleCompare, _p1._1, triple);
			case 'WithSubject':
				return A2(_flarebyte$ntriples_filter$Ntriples_Filter$fieldCompare, _p1._0, triple.subject);
			case 'WithPredicate':
				return A2(_flarebyte$ntriples_filter$Ntriples_Filter$fieldCompare, _p1._0, triple.predicate);
			default:
				return A2(_flarebyte$ntriples_filter$Ntriples_Filter$fieldCompare, _p1._0, triple.object);
		}
	});
var _flarebyte$ntriples_filter$Ntriples_Filter$filter = F2(
	function (tripleFilter, list) {
		return A2(
			_elm_lang$core$List$filter,
			_flarebyte$ntriples_filter$Ntriples_Filter$tripleCompare(tripleFilter),
			list);
	});
var _flarebyte$ntriples_filter$Ntriples_Filter$Triple = F3(
	function (a, b, c) {
		return {subject: a, predicate: b, object: c};
	});
var _flarebyte$ntriples_filter$Ntriples_Filter$Custom = F2(
	function (a, b) {
		return {ctor: 'Custom', _0: a, _1: b};
	});
var _flarebyte$ntriples_filter$Ntriples_Filter$LessThanOrEqual = function (a) {
	return {ctor: 'LessThanOrEqual', _0: a};
};
var _flarebyte$ntriples_filter$Ntriples_Filter$LessThan = function (a) {
	return {ctor: 'LessThan', _0: a};
};
var _flarebyte$ntriples_filter$Ntriples_Filter$GreaterThanOrEqual = function (a) {
	return {ctor: 'GreaterThanOrEqual', _0: a};
};
var _flarebyte$ntriples_filter$Ntriples_Filter$GreaterThan = function (a) {
	return {ctor: 'GreaterThan', _0: a};
};
var _flarebyte$ntriples_filter$Ntriples_Filter$EqualsAny = function (a) {
	return {ctor: 'EqualsAny', _0: a};
};
var _flarebyte$ntriples_filter$Ntriples_Filter$IsFalse = {ctor: 'IsFalse'};
var _flarebyte$ntriples_filter$Ntriples_Filter$IsTrue = {ctor: 'IsTrue'};
var _flarebyte$ntriples_filter$Ntriples_Filter$Regx = function (a) {
	return {ctor: 'Regx', _0: a};
};
var _flarebyte$ntriples_filter$Ntriples_Filter$Contains = function (a) {
	return {ctor: 'Contains', _0: a};
};
var _flarebyte$ntriples_filter$Ntriples_Filter$EndsWith = function (a) {
	return {ctor: 'EndsWith', _0: a};
};
var _flarebyte$ntriples_filter$Ntriples_Filter$StartsWith = function (a) {
	return {ctor: 'StartsWith', _0: a};
};
var _flarebyte$ntriples_filter$Ntriples_Filter$Equals = function (a) {
	return {ctor: 'Equals', _0: a};
};
var _flarebyte$ntriples_filter$Ntriples_Filter$IsEmpty = {ctor: 'IsEmpty'};
var _flarebyte$ntriples_filter$Ntriples_Filter$Ignore = {ctor: 'Ignore'};
var _flarebyte$ntriples_filter$Ntriples_Filter$WithObject = function (a) {
	return {ctor: 'WithObject', _0: a};
};
var _flarebyte$ntriples_filter$Ntriples_Filter$WithPredicate = function (a) {
	return {ctor: 'WithPredicate', _0: a};
};
var _flarebyte$ntriples_filter$Ntriples_Filter$WithSubject = function (a) {
	return {ctor: 'WithSubject', _0: a};
};
var _flarebyte$ntriples_filter$Ntriples_Filter$Or = F2(
	function (a, b) {
		return {ctor: 'Or', _0: a, _1: b};
	});
var _flarebyte$ntriples_filter$Ntriples_Filter$And = F2(
	function (a, b) {
		return {ctor: 'And', _0: a, _1: b};
	});
var _flarebyte$ntriples_filter$Ntriples_Filter$Not = function (a) {
	return {ctor: 'Not', _0: a};
};
var _flarebyte$ntriples_filter$Ntriples_Filter$Boolean = function (a) {
	return {ctor: 'Boolean', _0: a};
};
